<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>safebrowsing偷跑流量</title>
      <link href="/2024/12/02/safebrowsing%E5%81%B7%E8%B7%91%E6%B5%81%E9%87%8F/"/>
      <url>/2024/12/02/safebrowsing%E5%81%B7%E8%B7%91%E6%B5%81%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="safebrowsing-googleapis-com-443-偷跑流量的问题（和谐版）"><a href="#safebrowsing-googleapis-com-443-偷跑流量的问题（和谐版）" class="headerlink" title="safebrowsing.googleapis.com: 443 偷跑流量的问题（和谐版）"></a>safebrowsing.googleapis.com: 443 偷跑流量的问题（和谐版）</h1><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>最近发现某软件的流量用起来很快，一看后台才发现是safebrowsing.googleapis.com:443一直在下载，导致几十个G的流量被用掉了。这个端口是谷歌和腾讯用来更新一些欺骗性网站的内容，用于安全目的，但是偷跑几十G流量就有点夸张了。我的系统是macOS10.15。</p><p>关键词：safebrowsing googleapis 某软件 流量 macOS</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-设置某软件的配置文件"><a href="#1-设置某软件的配置文件" class="headerlink" title="1.设置某软件的配置文件"></a>1.设置某软件的配置文件</h3><p><code>&#39;DOMAIN-SUFFIX,safebrowsing.googleapis.com,DIRECT&#39;</code><br><code>&#39;DOMAIN-SUFFIX,safebrowsing.urlsec.qq.com,DIRECT&#39;</code></p><p>设置为<code>DIRECT</code>，在设置的时候要注意规则匹配原则，是不是从上往下的，如果你把这两条规则放在了一些更宽泛的规则后面，可能会失效。</p><h3 id="2-设置Safari"><a href="#2-设置Safari" class="headerlink" title="2.设置Safari"></a>2.设置Safari</h3><p>打开<code>Safari</code>，<code>偏好设置</code>-<code>安全性</code>，取消勾选<code>欺骗性站点</code>。但这个方法好像没用，我取消勾选后还是会偷跑流量。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>设置Safari的欺骗性站点没用，还是要设置某软件的配置文件，设置时注意最前匹配原则。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://github.com/Hackl0us/SS-Rule-Snippet/issues/92">规则格式有问题 #92</a></p><p><a href="https://blog.dun.im/dun/macos-ios-traffic.html">关于 macOS 和 iOS 占用大量网络资源，消耗流量排查</a></p></blockquote><h2 id="作者更新"><a href="#作者更新" class="headerlink" title="作者更新"></a>作者更新</h2><p>这篇文章当初发在csdn被限制，所以出了个和谐版？</p>]]></content>
      
      
      <categories>
          
          <category> 技术人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pycharm打字卡顿</title>
      <link href="/2024/07/01/pycharm%E6%89%93%E5%AD%97%E5%8D%A1%E9%A1%BF/"/>
      <url>/2024/07/01/pycharm%E6%89%93%E5%AD%97%E5%8D%A1%E9%A1%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="解决pycharm打字卡顿，性能低下问题"><a href="#解决pycharm打字卡顿，性能低下问题" class="headerlink" title="解决pycharm打字卡顿，性能低下问题"></a>解决pycharm打字卡顿，性能低下问题</h1><p>摘要：不知道何时起，我的pycharm就打字很卡，粘贴很卡，卡个一两秒钟，卡的没有规律，但单纯地看代码不卡，最后发现原来是<code>远程解释器</code>的问题</p><p>关键词： <code>pycharm</code> <code>macos</code> <code>remote</code> <code>python</code></p><h2 id="一、删除你的远程解释器"><a href="#一、删除你的远程解释器" class="headerlink" title="一、删除你的远程解释器"></a>一、删除你的远程解释器</h2><p>打开你的<code>偏好设置</code>-<code>全部显示</code>，然后直接删除不用的远程解释器，删到只剩5个就差不多不卡了。这个操作只会删除你的设置，不会删除远程服务器上的python环境。</p><blockquote><p><a href="https://youtrack.jetbrains.com/issue/PY-70613/lag-when-typing-in-PyCharm-with-a-remote-interpreter">lag when typing in PyCharm with a remote interpreter</a><br><a href="https://youtrack.jetbrains.com/issue/PY-62449/UI-lags-and-freezes-when-there-are-a-lot-of-outdated-interpreters-in-configs">UI lags and freezes when there are a lot of outdated interpreters in configs</a></p></blockquote><h2 id="二、增加内存"><a href="#二、增加内存" class="headerlink" title="二、增加内存"></a>二、增加内存</h2><p><code>帮助</code>-<code>编辑自定义虚拟机选项</code>，修改内存高一点可以，但我感觉效果不明显。我以前512m和现在2048m用起来没啥区别。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>善用谷歌，如果你发现百度不到什么东西的话。这个问题百度千篇一律，就是加虚拟内存，然而并没有什么卵用。也正因如此，写此博客，希望对你有用:)</p>]]></content>
      
      
      <categories>
          
          <category> 技术人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美化Mac终端</title>
      <link href="/2023/07/24/%E7%BE%8E%E5%8C%96Mac%E7%BB%88%E7%AB%AF/"/>
      <url>/2023/07/24/%E7%BE%8E%E5%8C%96Mac%E7%BB%88%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="使用figlet、lolcat和oh-my-zsh美化Mac终端"><a href="#使用figlet、lolcat和oh-my-zsh美化Mac终端" class="headerlink" title="使用figlet、lolcat和oh-my-zsh美化Mac终端"></a>使用figlet、lolcat和oh-my-zsh美化Mac终端</h2><p>摘要：实现开启动画和自定义ohmyzsh主题，需要一定基础</p><p>关键词： <code>figlet</code> <code>lolcat</code> <code>ohmyzsh</code> <code>macos</code></p><img src="/2023/07/24/%E7%BE%8E%E5%8C%96Mac%E7%BB%88%E7%AB%AF/g4.gif" class="" title="g4"><p>我使用的终端shell是zsh，如果你使用其他shell（如bash），只需要将下文中的<strong>zshrc</strong>替换成<strong>bashrc</strong>，依旧可以定义你的欢迎页，但是无法使用oh-my-zsh。</p><h3 id="一、欢迎页"><a href="#一、欢迎页" class="headerlink" title="一、欢迎页"></a>一、欢迎页</h3><h4 id="使用figlet和lolcat"><a href="#使用figlet和lolcat" class="headerlink" title="使用figlet和lolcat"></a>使用figlet和lolcat</h4><ol><li><p>figlet可以将普通终端文本转换为大字母 <br><a href="http://www.figlet.org/examples.html">http://www.figlet.org/examples.html</a> 可查看所有字体样式 <br>安装命令 <code>brew install figlet</code></p></li><li><p>lolcat可以为输出的文本添加彩虹般的色彩，我们可以通过管道将这两个命令联合起来 <br>安装命令 <code>gem install lolcat</code> (可能需要更新ruby)</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># welcome words</span><br><span class="line">figlet -f isometric3 helloworld | lolcat -a -d 1</span><br></pre></td></tr></table></figure><p>可以在终端中先试试效果，然后再在 <code>.zshrc</code> 文件中加入 </p><p><code>-f</code> 表示要选择的字体（见上面连接）， <code>helloworld</code> 表示要显示的字，<code>-a</code>表示动画，<code>-d 1</code>表示动画时长。两个命令具体怎么玩执行一下<code>--help</code>就知道了</p><blockquote><p>其他有趣的命令：<code>fortune</code>，<code>cowsay</code></p></blockquote><h4 id="使用系统配置motd"><a href="#使用系统配置motd" class="headerlink" title="使用系统配置motd"></a>使用系统配置motd</h4><p><a href="http://www.asciiworld.com/">http://www.asciiworld.com</a> 这个网站有很多图案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pico /etc/motd</span><br></pre></td></tr></table></figure><p>修改后执行<kbd>Ctrl</kbd>+<kbd>X</kbd>，输入y后回车</p><blockquote><p>注意：motd会比.zshrc先执行，如果你两个方法都用了，则会先显示图案，再显示helloworld</p></blockquote><h3 id="二、oh-my-zsh"><a href="#二、oh-my-zsh" class="headerlink" title="二、oh-my-zsh"></a>二、oh-my-zsh</h3><p>安装命令 <code>sh -c &quot;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</code></p><p>这是我自己改的主题，基于<code>robbyrussell.zsh-theme</code>。普通用户显示<code>%</code>，root显示<code>#</code>。最左边的箭头如果是绿色则表示命令正确执行，红色则表示上一条命令出错。右边的<code>&#123;master&#125;</code>是git的分支，黄色的<code>x</code>表示有未提交的修改，没有则不显示。 <br><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a> 可以去官方看所有的主题风格 <br>想了解<code>.zsh-theme</code>的简单语法可以看看我的另一篇博客</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PROMPT=&quot;%(?:%&#123;$fg_bold[green]%&#125;➜ :%&#123;$fg_bold[red]%&#125;➜ )%&#123;$fg[cyan]%&#125;%c %&#123;$fg[yellow]%&#125;%#%f &quot;</span><br><span class="line">RPROMPT=&#x27;$(git_prompt_info)%F&#123;green&#125;%T%f&#x27;</span><br><span class="line"></span><br><span class="line">ZSH_THEME_GIT_PROMPT_PREFIX=&quot;%&#123;$fg_bold[blue]%&#125;(%&#123;$fg[red]%&#125;&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;%&#123;$reset_color%&#125;&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%&#123;$fg[blue]%&#125;)%&#123;$fg[yellow]%&#125;✗&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_CLEAN=&quot;%&#123;$fg[blue]%&#125;) &quot;</span><br></pre></td></tr></table></figure><p>执行以下步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/themes/</span><br><span class="line">vi robb2.zsh-theme </span><br><span class="line"># 文件名随便，然后把上面的代码复制进去</span><br><span class="line">vi ~/.zshrc </span><br><span class="line"># 找到并修改ZSH_THEME=&quot;robb2&quot;</span><br><span class="line">source ~/.zshrc # 或者重新打开一个终端就能看到最上面的效果图了</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/weixin_28958733/article/details/116703354?ops_request_misc=&request_id=&biz_id=102&utm_term=pico%20motd&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-116703354.142%5Ev90%5Econtrol_2,239%5Ev3%5Econtrol&spm=1018.2226.3001.4187">Linux在终端打开app,自定义linux终端打开方式</a> <br><a href="https://blog.csdn.net/IT_DS/article/details/50991354">个性化定制Mac终端欢迎页</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> ohmyzsh </tag>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义ohmyzsh</title>
      <link href="/2023/07/24/%E8%87%AA%E5%AE%9A%E4%B9%89ohmyzsh/"/>
      <url>/2023/07/24/%E8%87%AA%E5%AE%9A%E4%B9%89ohmyzsh/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义oh-my-zsh主题风格，代码和语法的解释"><a href="#自定义oh-my-zsh主题风格，代码和语法的解释" class="headerlink" title="自定义oh-my-zsh主题风格，代码和语法的解释"></a>自定义oh-my-zsh主题风格，代码和语法的解释</h2><p>摘要：简要介绍.zsh-theme的代码（不涉及函数）</p><p>关键词：<code>ohmyzsh</code> <code>zsh-theme语法</code></p><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a> 官方的主题库 <br>我们可以在<code>~/.oh-my-zsh/themes</code>下面找到对应的主题代码，和官方的主题风格对照着看 <br><a href="https://zsh.sourceforge.io/Intro/intro_14.html#SEC14">https://zsh.sourceforge.io/Intro/intro_14.html#SEC14</a> 部分提示词语法</p><h3 id="一、语法介绍"><a href="#一、语法介绍" class="headerlink" title="一、语法介绍"></a>一、语法介绍</h3><p>下面解释一下<code>robbyrussell.zsh-theme</code>这个主题的代码</p><img src="/2023/07/24/%E8%87%AA%E5%AE%9A%E4%B9%89ohmyzsh/f3.jpg" class="" title="f3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PROMPT=&quot;%(?:%&#123;$fg_bold[green]%&#125;➜ :%&#123;$fg_bold[red]%&#125;➜ ) %&#123;$fg[cyan]%&#125;%c%&#123;$reset_color%&#125;&quot;</span><br><span class="line">PROMPT+=&#x27; $(git_prompt_info)&#x27;</span><br><span class="line"></span><br><span class="line">ZSH_THEME_GIT_PROMPT_PREFIX=&quot;%&#123;$fg_bold[blue]%&#125;git:(%&#123;$fg[red]%&#125;&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;%&#123;$reset_color%&#125; &quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%&#123;$fg[blue]%&#125;) %&#123;$fg[yellow]%&#125;✗&quot;</span><br><span class="line">ZSH_THEME_GIT_PROMPT_CLEAN=&quot;%&#123;$fg[blue]%&#125;)&quot;</span><br></pre></td></tr></table></figure><p><code>PROMPT=&quot;&quot;</code>：这是主提示符的设置。它定义了一个包含颜色和文本的字符串，用于显示在终端的最前面，表示当前工作目录和git的分支和仓库状态。具体解释如下：</p><ul><li><code>%&#123;$fg_bold[green]%&#125;</code>：这是一个 Zsh 中的提示符替换序列，用于将后面的文本显示为绿色，并加粗。</li><li><code>%c</code>：这是一个提示符替换序列，用于显示当前所在的目录路径。</li><li><code>%&#123;$fg[cyan]%&#125;</code>：后面的文本显示为青色。</li><li><code>%&#123;$reset_color%&#125;</code>：后面的文本颜色恢复为默认颜色，这个很重要，不设置的话可能会导致意想不到的颜色出现，比如使用<kbd>Tab</kbd>补全的时候出现了半截绿色<br><img src="/2023/07/24/%E8%87%AA%E5%AE%9A%E4%B9%89ohmyzsh/f2.png" class="" title="f2"></li><li>但其实我是用<code>%f</code>这个命令替换<code>%&#123;$reset_color%&#125;</code>才解决了半截绿色的问题，不知道为什么</li></ul><p><code>PROMPT+=&#39; $(git_prompt_info)&#39;</code>：在上面的主提示符后面添加一个命令替换，用于调用函数 <code>git_prompt_info</code> 并将其输出添加到提示符中。这个函数用于获取当前 Git 仓库的状态信息。后面的4个变量就服务于这个函数，也可以定义其他函数，如<code>ruby_prompt_info</code>等。</p><p><code>ZSH_THEME_GIT_PROMPT_PREFIX=&quot;&quot;</code>：这是一个 Git 仓库状态前缀的设置，用于显示在 Git 仓库状态信息前面。</p><p><code>ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;&quot;</code>：这是一个 Git 仓库状态后缀的设置。</p><p><code>ZSH_THEME_GIT_PROMPT_DIRTY=&quot;%&#123;$fg[blue]%&#125;) %&#123;$fg[yellow]%&#125;✗&quot;</code>：这是一个 Git 仓库状态为 “Dirty”（未提交修改）时的设置。它添加蓝色右括号<code>)</code>，然后添加黄色的<code>✗</code>符号，表示有未提交的修改。</p><p><code>ZSH_THEME_GIT_PROMPT_CLEAN=&quot;%&#123;$fg[blue]%&#125;)&quot;</code>：这是一个 Git 仓库状态为 “Clean”（没有未提交的修改）时的设置，添加蓝色的右括号。</p><blockquote><p>这两个变量只会打印其中之一，也就是当有未提交的修改时会打印<code>ZSH_THEME_GIT_PROMPT_DIRTY</code>的值，否则打印<code>ZSH_THEME_GIT_PROMPT_CLEAN</code></p></blockquote><h3 id="二、转义字符"><a href="#二、转义字符" class="headerlink" title="二、转义字符"></a>二、转义字符</h3><p>注意有些前缀是<code>%</code>，有些是<code>$</code></p><h4 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h4><p><code>%n</code> - username <br><code>%m</code> - short name of the current host <br><code>%M</code> - name of curent host <br><code>%#</code> - a <code>%</code> or a <code>#</code>, depending on whether the shell is running as root or not <br><code>%~</code> - relative path <br><code>%/</code> or %d - absolute path <br><code>%c</code> or <code>%C</code> - Trailing component of the current working directory. <br><code>%t</code> - time 12hr am&#x2F;pm format <br><code>%T</code> - time 24hr format <br><code>%w</code> - day and date (day-dd) <br><code>%D</code> - Date (default: yy-mm-dd) \</p>`%D{%f}` - day of the month \<p><code>%l</code> or <code>%y</code> - The line  (tty)  the user is logged in on, without <code>/dev/</code> prefix.</p><h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><p><code>%F&#123;237&#125;</code> 256 color number  <br><code>%F&#123;red&#125;</code> 8 color name (black, red, green, yellow, blue, magenta, cyan, white) <br><code>$FG[237]</code> (notice the <code>$</code> sign instead of <code>%</code>) 256 color number <br><code>$fg[red]</code> (notice the <code>$</code> and lower case <code>fg</code>) 8 color name (black, red, green, yellow, blue, magenta, cyan, white) <br><code>%&#123;$fg_bold[blue]%&#125;</code> bold variants <br><code>%F</code> is Foreground color, <code>$f</code> for resetting foreground color <br><code>%K</code> is bacKground color, <code>%k</code> for resetting background-color <br><code>$reset_color</code> is a Zsh variable that resets the color of the output <br>You can use Unicode for symbols <br><code>%E</code> Clear to end of the line. <br><code>%U</code> (<code>%u</code>) to Start (stop) underline mode.</p><h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><p><code>%&#123;...%&#125;</code> 来表示提示符替换序列。这些序列允许在提示符中插入颜色、样式和其他特殊文本，以实现个性化的终端显示。例如 <code>%&#123;$fg[red]%&#125;</code> 表示将后面的文本显示为红色。 <br><code>%(condition.true-text.false-text)</code> 来进行条件判断，并在满足条件时显示 <code>true-text</code>，不满足条件时显示 <code>false-text</code>。 <br><code>%?</code> 来获取上一个命令的退出状态码，并根据退出状态码进行条件判断。例如 <code>%&#123;$fg_bold[red]%&#125;%(?..[%?])</code> 可以在上一个命令返回非零状态码时显示状态码，否则不显示。 <br><code>%F&#123;code&#125;</code> 和 <code>%f</code> 来设置异步命令的前景色。可以使用它们来在命令执行期间改变命令输出的颜色。 <br><code>$underline</code> 表示下划线文本 <br><code>$blink</code> 表示闪烁文本 <br><code>%#</code> 可以显示当前 Zsh 会话中已执行的命令数。 <br><code>%B%&gt;</code> 可以显示一个右提示符，通常用于辅助显示长命令或多行命令输入。 <br><code>%B%&#123;...%&#125;</code> 来添加颜色和样式到自动补全提示符。 <br><code>%h</code> 显示当前历史命令 <br><code>%!</code> 可以显示最近执行的历史命令。 <br><code>%d</code> 表示目录堆栈的深度，这对于有多个目录切换的情况下很有用。 \</p>`%{%}` 表示宽度适应，当终端窗口变窄时，可以隐藏长路径等。 \<p><code>\\</code> 表示插入逃逸字符，从而显示特殊字符，例如 <code>$</code>、<code>%</code> 等，这个逃逸字符我试了但没有效果 <br><code>$(date)</code> 表示插入当前日期。 <br><code>$variable_name</code> 表示变量。例如 <code>$PROMPT</code> 表示一个保存主提示符的变量。 <br><code>\n</code> 表示换行 <br><code>\t</code> 表示制表符（Tab）</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/Hothy/article/details/119146233?ops_request_misc=&request_id=&biz_id=102&utm_term=ohmyzsh%E8%87%AA%E5%AE%9A%E4%B9%89&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-119146233.142%5Ev90%5Econtrol_2,239%5Ev3%5Econtrol&spm=1018.2226.3001.4187">自定义一个oh-my-zsh 主题</a></p><h3 id="作者更新"><a href="#作者更新" class="headerlink" title="作者更新"></a>作者更新</h3><p>由于markdown解析器的问题，对部分语句做了特殊处理</p>]]></content>
      
      
      <categories>
          
          <category> 技术人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
            <tag> ohmyzsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lolcat报错</title>
      <link href="/2023/07/23/lolcat%E6%8A%A5%E9%94%99/"/>
      <url>/2023/07/23/lolcat%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="zsh-usr-local-bin-lolcat-bad-interpreter-System-Library-Frameworks-Ruby-framework-Versions-2-3-usr-bin-ruby-no-such-file-or-directory"><a href="#zsh-usr-local-bin-lolcat-bad-interpreter-System-Library-Frameworks-Ruby-framework-Versions-2-3-usr-bin-ruby-no-such-file-or-directory" class="headerlink" title="zsh: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;lolcat: bad interpreter: &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.3&#x2F;usr&#x2F;bin&#x2F;ruby: no such file or directory"></a>zsh: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;lolcat: bad interpreter: &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.3&#x2F;usr&#x2F;bin&#x2F;ruby: no such file or directory</h2><p>关键词： <code>macos</code> <code>zsh</code> <code>lolcat</code> <code>ruby</code></p><h3 id="一、工作环境"><a href="#一、工作环境" class="headerlink" title="一、工作环境"></a>一、工作环境</h3><p>macOS Catalina 10.15.6 <br>目前用的终端是zsh，之前用的是bash，在系统升级后自动换成了zsh也就一直用着了。我在Mojave的时候安装了lolcat，现在发现不能用了， <code>lolcat --help</code> 的错误就是标题</p><h3 id="二、后记写在前"><a href="#二、后记写在前" class="headerlink" title="二、后记写在前"></a>二、后记写在前</h3><p>在我成功安装了lolcat之后删除再执行 <code>gem install lolcat</code> ，发现成功安装上了，个人感觉应该是ruby版本的问题</p><h3 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h3><h4 id="直接执行-gem-install-lolcat-n-usr-local-bin，如果不行再一步一步往下看"><a href="#直接执行-gem-install-lolcat-n-usr-local-bin，如果不行再一步一步往下看" class="headerlink" title="直接执行 gem install lolcat -n /usr/local/bin，如果不行再一步一步往下看"></a>直接执行 <code>gem install lolcat -n /usr/local/bin</code>，如果不行再一步一步往下看</h4><h4 id="重新安装-gem-install-lolcat发现新错误"><a href="#重新安装-gem-install-lolcat发现新错误" class="headerlink" title="重新安装 gem install lolcat发现新错误"></a>重新安装 <code>gem install lolcat</code>发现新错误</h4><blockquote><p>ERROR:  While executing gem … (Gem::FilePermissionError)<br>You don’t have write permissions for the &#x2F;Library&#x2F;Ruby&#x2F;Gems&#x2F;2.6.0 directory.</p></blockquote><h4 id="更新一下-sudo-gem-update-system"><a href="#更新一下-sudo-gem-update-system" class="headerlink" title="更新一下 sudo gem update --system"></a>更新一下 <code>sudo gem update --system</code></h4><p><a href="https://blog.csdn.net/u013712343/article/details/106274756/">https://blog.csdn.net/u013712343/article/details/106274756/</a> 说明可能是系统升级的问题，但是继续报错</p><blockquote><p>ERROR:  While executing gem … (Errno::EPERM)<br>Operation not permitted @ rb_sysopen - &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.6&#x2F;usr&#x2F;bin&#x2F;gem</p></blockquote><h4 id="版本有点低-ruby-version"><a href="#版本有点低-ruby-version" class="headerlink" title="版本有点低 ruby --version"></a>版本有点低 <code>ruby --version</code></h4><blockquote><p>ruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]</p></blockquote><h4 id="更新ruby-brew-install-ruby"><a href="#更新ruby-brew-install-ruby" class="headerlink" title="更新ruby brew install ruby"></a>更新ruby <code>brew install ruby</code></h4><blockquote><p>By default, binaries installed by gem will be placed into:<br>  &#x2F;usr&#x2F;local&#x2F;lib&#x2F;ruby&#x2F;gems&#x2F;3.1.0&#x2F;bin <br>  You may want to add this to your PATH. <br>  ruby is keg-only, which means it was not symlinked into &#x2F;usr&#x2F;local, because macOS already provides this software and installing another version in parallel can cause all kinds of trouble.<br>  If you need to have ruby first in your PATH, run:<br>  echo ‘export PATH&#x3D;”&#x2F;usr&#x2F;local&#x2F;opt&#x2F;ruby&#x2F;bin:$PATH”‘ &gt;&gt; ~&#x2F;.zshrc <br>  For compilers to find ruby you may need to set:<br>  export LDFLAGS&#x3D;”-L&#x2F;usr&#x2F;local&#x2F;opt&#x2F;ruby&#x2F;lib”<br>  export CPPFLAGS&#x3D;”-I&#x2F;usr&#x2F;local&#x2F;opt&#x2F;ruby&#x2F;include”</p></blockquote><p>根据提示依次执行</p><ol><li><code>cd</code></li><li><code>echo &#39;export PATH=&quot;/usr/local/opt/ruby/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc</code></li><li><code>export LDFLAGS=&quot;-L/usr/local/opt/ruby/lib&quot;</code></li><li><code>export CPPFLAGS=&quot;-I/usr/local/opt/ruby/include&quot;</code></li></ol><h4 id="先删一下-gem-uninstall-lolcat，输入-y-（这步应该是选做的，不删也无所谓）"><a href="#先删一下-gem-uninstall-lolcat，输入-y-（这步应该是选做的，不删也无所谓）" class="headerlink" title="先删一下 gem uninstall lolcat，输入 y （这步应该是选做的，不删也无所谓）"></a>先删一下 <code>gem uninstall lolcat</code>，输入 <code>y</code> （这步应该是选做的，不删也无所谓）</h4><blockquote><p>Remove executables: <br>lolcat <br>in addition to the gem? [Yn]  y <br>Removing lolcat <br>Successfully uninstalled lolcat-100.0.1</p></blockquote><h4 id="重新安装-gem-install-lolcat-n-usr-local-bin"><a href="#重新安装-gem-install-lolcat-n-usr-local-bin" class="headerlink" title="重新安装 gem install lolcat -n /usr/local/bin"></a>重新安装 <code>gem install lolcat -n /usr/local/bin</code></h4><h4 id="看看有没成功-lolcat-version-lolcat-help"><a href="#看看有没成功-lolcat-version-lolcat-help" class="headerlink" title="看看有没成功 lolcat --version ; lolcat --help"></a>看看有没成功 <code>lolcat --version ; lolcat --help</code></h4><blockquote><p>lolcat 100.0.1 (c)2011 <a href="mailto:&#109;&#x6f;&#101;&#64;&#x62;&#117;&#x73;&#x79;&#x6c;&#111;&#111;&#112;&#x2e;&#x6e;&#101;&#x74;">moe@busyloop.net</a></p></blockquote><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p><a href="https://linux.cn/article-5798-1.html">https://linux.cn/article-5798-1.html</a> 我在没有更新ruby的时候试过这篇博客的方法，没试通</p>]]></content>
      
      
      <categories>
          
          <category> 技术人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>todolist</title>
      <link href="/2020/04/04/todolist/"/>
      <url>/2020/04/04/todolist/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="87aac249e212c7eaa2d1545be5e44eb7342dfa0c0baf70b6843d89e26b2c2ef0">165d50f05814027fb7fe5e4ae8a088d8cabf1ea2d88ccf0f53dc7b0b289f3333d206493bd7b435db7595aa67ba51b41a60779ed3b01f15f7eb316c4ee208c7ad8485b266723e041fb520c9892fa952514d1d455e7137d9fd2682c92a44e52d5a063fec8816b8f2d9193568bb12bc016c87a43fb98c14c6fa9d650bc4700e8b55385a3eac7893169f3e0ea619461e9c63c32e1151a65ae147879c7f0f9b3a89de46c149bbc839b033d56740cbf1f9b1878183bb1b3b54b64687a4322de6d8ff02571ee3bd261edc1872afc50581c35101d4ba8f4416ba5b8ce2a8d406978d6b8216cbf1f7f608d03d64924251a5e3752d91c51e04c40ed29f60bcb67920f1f7b6185581c1dc65975cfc58ef87767e7daa74761c71ab5161e4148fe918786109af095f48b5294df58b8735333b949892e26f12d571ec2ab7c25f3a02a05041db048a2b64777c10aeaa6f78e2c972c1af2feae29405fc8b03b483ae9e5a7610290479611dba221bae82c88e29a32255fb837e71b7f1d59581a1d8861fde6595220a3253cb2a17f36cd1be2dcf7f717a80802380615ef5ff439a3eb002a3abb5c20ff8ae7f08e0f44b862b700ab83db689a3501239790e770dda5c028eae86760eefa592fcce377e2e5e8cc9ba830bf442ed18992548084a0ac80590b7caf7d5446fa17963c9caca63627ab8e1bb179f0a88bc6b7d5ec8c2324cd2aaa00f6df7cf15cc98ecaeb3f21bc3f7dc165fe4436cd67e6cb96d4b9fee853d77cb7bdecd80102d2f25e7ece8dd228b0947c369f780526fd95951a0dc5b624c1f1d5ad471273838b8ce93f2817dd540caf043000411c0b9399b0e0b318b5f2e053517968c3117d98916254597e49745fb4416b05d70ee10b3355f6d07219dc39b712d45e2be1c40aabda8955f8257f0db648d76a2e30687a6efc162a5bc5adaf20c0636788de43fc1625f05bb3c0e1e7f7bd67941c6b02ecbb0bad2398e61caec01c623bf6cfc78cc918b13bc1ee44dacc8c9a1c8ad36a3e66007c3fa3ee8411bb67d7478d1996fd24ebe7682d669969cf563b2a25fabdc0ae16b26577219ed27b7d370deb50de29c9622765479c95ae5bed5beec350b89cd233b9ad2f62794f6f371686ab655a5dee2dc4922de4fb2512adc787a9528cfdd915685e97d637da991e3582b4c5170232db3ae8a6da4f063a4fcef210a55b29e37ff54c9fe8f6a4500eccc437b53329acc83e028ed4bb71ce82dc838495dca8dd9b94c269512d644a4280ed2e9dd87e2c2213790356a017b7ed70a04e5af87b15d7bdc9c7d7b50aa1b6d2480e72fc8cf6f057a1a01fac3a99f9ee2f9f830a7212b24e19bc3b185f5bfba8e8d5d2801d391b7803dfab4b20265d544c0c7a0bffebcb298be5814d002cd076e2deeba</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
